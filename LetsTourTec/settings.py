"""
Django settings for LetsTourTec project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
# boto3 will be imported by storages if needed.
from datetime import timedelta
import logging
# from botocore.config import Config # Only if a custom s3_client is reinstated later
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file for local development if it exists
# try:
#     import dotenv
#     dotenv.load_dotenv(os.path.join(BASE_DIR, '.env'))
# except ImportError:
#     pass # dotenv not installed or no .env file

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
DEBUG = os.environ.get('DJANGO_DEBUG', 'False').lower() == 'true'

if not SECRET_KEY:
    if DEBUG:
        print("WARNING: DJANGO_SECRET_KEY not set! Using a temporary insecure key for DEBUG mode. DO NOT USE THIS IN PRODUCTION.")
        SECRET_KEY = 'temporary_insecure_debug_key_for_local_development_only_12345_replace_me'
    else:
        raise ImproperlyConfigured("DJANGO_SECRET_KEY environment variable must be set for production.")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG is set above

ALLOWED_HOSTS_ENV = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_ENV.split(',')]
elif DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']
    print(f"WARNING: DJANGO_ALLOWED_HOSTS not set. Defaulting to: {ALLOWED_HOSTS} for DEBUG mode.")
else:
    ALLOWED_HOSTS = []
    # Consider raising ImproperlyConfigured if not set in production, or provide a sensible default.
    print("WARNING: DJANGO_ALLOWED_HOSTS not set for production. Service may not be accessible.")


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'LTtApp',
    'corsheaders',
    'storages',
    'rest_framework',
    'rest_framework_simplejwt',
    #'django.contrib.gis',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LetsTourTec.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'LTtApp', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LetsTourTec.wsgi.application'

# Database
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=os.environ.get('DJANGO_DB_SSL_REQUIRE', 'False').lower() == 'true')}
elif DEBUG:
    print("WARNING: DATABASE_URL environment variable not found. Falling back to local SQLite for development.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    raise ImproperlyConfigured("DATABASE_URL environment variable must be set for production.")

AUTH_USER_MODEL = 'LTtApp.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'LTtApp', 'static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = '/media/' # Default for local, will be overridden by S3 if configured
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_files_collected')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST')
EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_DEFAULT_FROM_EMAIL', 'webmaster@localhost')
SERVER_EMAIL = os.environ.get('DJANGO_SERVER_EMAIL', 'root@localhost')

STRIPE_SECRET_KEY = os.environ.get('DJANGO_STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.environ.get('DJANGO_STRIPE_PUBLISHABLE_KEY')

if not DEBUG and not STRIPE_SECRET_KEY:
    print("WARNING: DJANGO_STRIPE_SECRET_KEY is not set for production environment.")
if not DEBUG and not STRIPE_PUBLISHABLE_KEY:
    print("WARNING: DJANGO_STRIPE_PUBLISHABLE_KEY is not set for production environment.")

AWS_STORAGE_BUCKET_NAME = os.environ.get('DJANGO_AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('DJANGO_AWS_S3_REGION_NAME')
AWS_S3_ENDPOINT_URL = os.environ.get('DJANGO_AWS_S3_ENDPOINT_URL')

AWS_S3_CUSTOM_DOMAIN = None
if AWS_STORAGE_BUCKET_NAME and AWS_S3_REGION_NAME and not AWS_S3_ENDPOINT_URL:
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'

if AWS_STORAGE_BUCKET_NAME:
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_DEFAULT_ACL = None
    AWS_S3_FILE_OVERWRITE = False
    AWS_QUERYSTRING_AUTH = True
    AWS_LOCATION = 'media'
    if AWS_S3_CUSTOM_DOMAIN:
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
    elif AWS_S3_ENDPOINT_URL:
        MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/{AWS_LOCATION}/'
    else:
        MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com/{AWS_LOCATION}/'
else:
    if not DEBUG:
        print("WARNING: DJANGO_AWS_STORAGE_BUCKET_NAME not set. Using local file storage for media.")
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


CORS_ALLOWED_ORIGINS_ENV = os.environ.get('DJANGO_CORS_ALLOWED_ORIGINS')
if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_ENV.split(',')]
elif DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:4200", "https://localhost:4200",
        "http://127.0.0.1:4200", "https://127.0.0.1:4200",
    ]
    print(f"WARNING: DJANGO_CORS_ALLOWED_ORIGINS not set. Defaulting to {CORS_ALLOWED_ORIGINS} for DEBUG mode.")
else:
    CORS_ALLOWED_ORIGINS = []
    # Consider raising ImproperlyConfigured if not set in production
    print("WARNING: DJANGO_CORS_ALLOWED_ORIGINS not set for production. No cross-origin requests will be allowed by default.")

CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS_ENV = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_ENV:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_ENV.split(',')]
elif DEBUG:
    CSRF_TRUSTED_ORIGINS = [
        "http://localhost:4200", "https://localhost:4200",
        "http://127.0.0.1:4200", "https://127.0.0.1:4200",
    ]
    print(f"WARNING: DJANGO_CSRF_TRUSTED_ORIGINS not set. Defaulting to {CSRF_TRUSTED_ORIGINS} for DEBUG mode.")
else:
    CSRF_TRUSTED_ORIGINS = []
    # Consider raising ImproperlyConfigured if not set in production
    print("WARNING: DJANGO_CSRF_TRUSTED_ORIGINS not set for production.")


CSRF_COOKIE_NAME = 'csrftoken'
SESSION_COOKIE_SAMESITE = os.environ.get('DJANGO_SESSION_COOKIE_SAMESITE', 'Lax')
CSRF_COOKIE_SAMESITE = os.environ.get('DJANGO_CSRF_COOKIE_SAMESITE', 'Lax')

SESSION_COOKIE_SECURE = os.environ.get('DJANGO_SESSION_COOKIE_SECURE', 'False').lower() == 'true'
CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE', 'False').lower() == 'true'

if not DEBUG and not SESSION_COOKIE_SECURE:
    print("WARNING: SESSION_COOKIE_SECURE is False in a non-DEBUG (production) environment. Ensure HTTPS is used.")
if not DEBUG and not CSRF_COOKIE_SECURE:
    print("WARNING: CSRF_COOKIE_SECURE is False in a non-DEBUG (production) environment. Ensure HTTPS is used.")

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ) if not DEBUG else (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.environ.get('DJANGO_JWT_ACCESS_TOKEN_LIFETIME_MINUTES', '60'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.environ.get('DJANGO_JWT_REFRESH_TOKEN_LIFETIME_DAYS', '7'))),
    'ROTATE_REFRESH_TOKENS': os.environ.get('DJANGO_JWT_ROTATE_REFRESH_TOKENS', 'True').lower() == 'true',
    'BLACKLIST_AFTER_ROTATION': os.environ.get('DJANGO_JWT_BLACKLIST_AFTER_ROTATION', 'True').lower() == 'true',
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None, 'AUDIENCE': None, 'ISSUER': None, 'JWK_URL': None, 'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=int(os.environ.get('DJANGO_JWT_SLIDING_TOKEN_LIFETIME_MINUTES', '5'))),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=int(os.environ.get('DJANGO_JWT_SLIDING_TOKEN_REFRESH_LIFETIME_DAYS', '1'))),
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
            'stream': sys.stdout,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'LTtApp': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_APP_LOG_LEVEL', 'DEBUG' if DEBUG else 'INFO'),
            'propagate': False,
        },
        'celery': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_CELERY_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'boto3': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_BOTO3_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
        'botocore': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_BOTOCORE_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
        'storages': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_STORAGES_LOG_LEVEL', 'WARNING'),
            'propagate': False,
        },
    }
}

DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.environ.get('DJANGO_DATA_UPLOAD_MAX_MEMORY_SIZE', 2621440)) # Default to 2.5MB

# CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0' if DEBUG else None)
# if not CELERY_BROKER_URL and not DEBUG:
#    raise ImproperlyConfigured("CELERY_BROKER_URL must be set for production if Celery is used.")
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', CELERY_BROKER_URL)
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE

print(f"DEBUG mode is: {DEBUG}")
if DATABASES['default']['ENGINE'] == 'django.db.backends.sqlite3':
    print(f"Using SQLite database at: {DATABASES['default']['NAME']}")
else:
    # Avoid printing sensitive parts of DATABASE_URL if it contains credentials
    db_engine = DATABASES['default'].get('ENGINE', 'unknown')
    db_host = DATABASES['default'].get('HOST', 'unknown')
    db_name = DATABASES['default'].get('NAME', 'unknown')
    print(f"Using external database. Engine: {db_engine}, Host: {db_host}, Name: {db_name}")

if DEFAULT_FILE_STORAGE == 'storages.backends.s3boto3.S3Boto3Storage':
    print(f"Using S3 for media storage. Bucket: {AWS_STORAGE_BUCKET_NAME}, Region: {AWS_S3_REGION_NAME}")
else:
    print(f"Using local file system for media storage at MEDIA_ROOT: {MEDIA_ROOT}")
